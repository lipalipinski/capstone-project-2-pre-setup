jenkins:
  crumbIssuer:
    standard:
      excludeClientIPFromCrumb: true
  nodes:
  - permanent:
      labelString: "ec2-worker ec2"
      launcher:
        ssh:
          credentialsId: "jenkins-worker-pk"
          host: "jenkins-worker-1"
          port: 22
          sshHostKeyVerificationStrategy:
            manuallyTrustedKeyVerificationStrategy:
              requireInitialManualTrust: false
      name: "ec2-worker-1"
      remoteFS: "/home/ubuntu/jenkins"
      retentionStrategy: "always"
  - permanent:
      labelString: "ec2-worker ec2"
      launcher:
        ssh:
          credentialsId: "jenkins-worker-pk"
          host: "jenkins-worker-2"
          port: 22
          sshHostKeyVerificationStrategy:
            manuallyTrustedKeyVerificationStrategy:
              requireInitialManualTrust: false
      name: "ec2-worker-2"
      remoteFS: "/home/ubuntu/jenkins"
      retentionStrategy: "always"
  numExecutors: 0
unclassified:
  gitHubPluginConfig:
    configs:
    - credentialsId: "jenkins-petclinic-token"
  shell:
    shell: "/bin/bash"
tool:
  git:
    installations:
    - home: "git"
      name: "Default"
  maven:
    installations:
    - name: "maven-3.9.2"
      properties:
      - installSource:
          installers:
          - maven:
              id: "3.9.2"
jobs:
  - script: >
      pipelineJob('Petclinic-Provision-Up') {
        description('''
        Provisions an RDS DB instance, ALB and an EC2 instance for a Petclinic application.
        If the RDS already exists, but is not available (i.e. stopped) it tries to start it 
        and wait for it to become available. After provisioning an application EC2 instance it runs Apache 
        container and exposes it on :8080 to tests a connection and validate server configuration. 
        \nConfigured in JCasC with JobDSL''')
        definition {
          cpsScm {
            lightweight(false)
            scm {
              gitSCM{
                userRemoteConfigs{
                  userRemoteConfig{
                    name("") //Custom Repository Name or ID
                    url("https://github.com/lipalipinski/capstone-project-2-ci-cd.git") //URL for the repository
                    refspec("") // Branch spec
                    credentialsId("") // Credential ID. Leave blank if not required
                  }
                }
                branches{
                  branchSpec{
                    name("refs/heads/main")
                  }
                }
                browser{} // Leave blank for default Git Browser
                gitTool("") //Leave blank for default git executable
              }
            }
            scriptPath("Jenkinsfile-Up")
          }
        }
      }
  - script: >
      pipelineJob('Petclinic-Provision-Down') {
        description('''
        Destroys application ALB and EC2. Optionally it could stop and/or destroy application DB.
        After stopping a DB waits for its state to become "stopped".
        \nConfigured in JCasC with JobDSL''')
        parameters {
          booleanParam('DESTROY_DB', false, 'Check out to permanently delete database resource')
          booleanParam('STOP_DB', true, 'Check out to stop RDS instance')
        }
        definition {
          cpsScm {
            lightweight(false)
            scm {
              gitSCM{
                userRemoteConfigs{
                  userRemoteConfig{
                    name("") //Custom Repository Name or ID
                    url("https://github.com/lipalipinski/capstone-project-2-ci-cd.git") //URL for the repository
                    refspec("") // Branch spec
                    credentialsId("") // Credential ID. Leave blank if not required
                  }
                }
                branches{
                  branchSpec{
                    name("refs/heads/main")
                  }
                }
                browser{} // Leave blank for default Git Browser
                gitTool("") //Leave blank for default git executable
              }
            }
            scriptPath("Jenkinsfile-Down")
          }
        }
      }
  - script: >
      pipelineJob('Petclinic-Provision-Plan') {
        description('''
        Allows to verify execution plans before provisioning application infrastructure
        Configured in JCasC with JobDSL''')
        definition {
          cpsScm {
            lightweight(false)
            scm {
              gitSCM{
                userRemoteConfigs{
                  userRemoteConfig{
                    name("") //Custom Repository Name or ID
                    url("https://github.com/lipalipinski/capstone-project-2-ci-cd.git") //URL for the repository
                    refspec("") // Branch spec
                    credentialsId("") // Credential ID. Leave blank if not required
                  }
                }
                branches{
                  branchSpec{
                    name("refs/heads/main")
                  }
                }
                browser{} // Leave blank for default Git Browser
                gitTool("") //Leave blank for default git executable
              }
            }
            scriptPath("Jenkinsfile-Plan")
          }
        }
      }
  - script: >
      multibranchPipelineJob('Petclinic-PR') {
        // dissable pipeline by defalut
        configure {
          // it / disabled << 'true' // dissable pipeline by defalut
        }
        description('''
        Go to Configure >> Apply and Save to enable Job \n
        Continous Integration pipeline triggered by GitHub webhook.
        Tests app on push, builds a container and stores container image in ECR.
        Image tag is short commit hash, or app version (when building a commit to main branch)
        Validates app version on pull request. Tags a commit on main branch with application version.
        \nConfigured in JCasC with JobDSL''')
        branchSources {
          branchSource{
            buildStrategies {}
            source{
              github {
                repoOwner('lipalipinski')
                repository('spring-petclinic.git')
                configuredByUrl(true)
                credentialsId('jenkins-petclinic-token-user')
                repositoryUrl('https://github.com/lipalipinski/spring-petclinic.git')
                traits {

                  // Discovers branches on the repository.
                  gitBranchDiscovery()
                  gitHubBranchDiscovery {
                    // Determines which branches are discovered.
                    strategyId(3)
                  }
                  
                  // Discovers pull requests where the origin repository is the same as the target repository.
                  gitHubPullRequestDiscovery {
                    // Determines how pull requests are discovered: Merging the pull request with the current target branch revision Discover each pull request once with the discovered revision corresponding to the result of merging with the current revision of the target branch.
                    strategyId(2)
                  }
                
                  pruneStaleTag()

                  cloneOption {
                    extension {
                      // Perform shallow clone, so that git will not download the history of the project, saving time and disk space when you just want to access the latest version of a repository.
                      shallow(false)
                      // Deselect this to perform a clone without tags, saving time and disk space when you just want to access what is specified by the refspec.
                      noTags(false)
                      // Specify a folder containing a repository that will be used by Git as a reference during clone operations.
                      reference('.')
                      // Specify a timeout (in minutes) for clone and fetch operations.
                      timeout(5)
                    }
                  }
                }
              }
            }
          }
        }
        factory{
          remoteJenkinsFileWorkflowBranchProjectFactory{
            fallbackBranch("main")
            localMarker("")
            matchBranches(false)
            remoteJenkinsFile("Jenkinsfile-PR")
            remoteJenkinsFileSCM{
              gitSCM{
                userRemoteConfigs{
                  userRemoteConfig{
                    name("") //Custom Repository Name or ID
                    url("https://github.com/lipalipinski/capstone-project-2-ci-cd.git") //URL for the repository
                    refspec("") // Branch spec
                    credentialsId("") // Credential ID. Leave blank if not required
                  }
                }
                branches{
                  branchSpec{
                    name("refs/heads/main")
                  }
                }
                browser{} // Leave blank for default Git Browser
                gitTool("") //Leave blank for default git executable
              }
            }
          }
        }
        triggers {
          periodicFolderTrigger{
            interval('5m')
          }
          cron{
            spec('*/5 * * * *')
          }
        }
      }
  - script: >
      pipelineJob('Petclinic-Deploy') {
        description('''
        Deploy an application container with a given tag.
        Takes a server IP from terraform output.
        Takes SSH key from credentials (provided with Secrets Manager plugin)
        Takes ECR_REGISTRY_URL from AWS Parameter Store.
        Tests the application on ALB address.
        \nConfigured in JCasC with JobDSL''')
        parameters {
          string {
            name("APP_TAG")
            description("Provide a tag of an app image to be deployed")
            trim(true)
          }
        }
        definition {
          cpsScm {
            lightweight(false)
            scm {
              gitSCM{
                userRemoteConfigs{
                  userRemoteConfig{
                    name("") //Custom Repository Name or ID
                    url("https://github.com/lipalipinski/capstone-project-2-ci-cd.git") //URL for the repository
                    refspec("") // Branch spec
                    credentialsId("") // Credential ID. Leave blank if not required
                  }
                }
                branches{
                  branchSpec{
                    name("refs/heads/main")
                  }
                }
                browser{} // Leave blank for default Git Browser
                gitTool("") //Leave blank for default git executable
              }
            }
            scriptPath("Jenkinsfile-Deploy")
          }
        }
      }